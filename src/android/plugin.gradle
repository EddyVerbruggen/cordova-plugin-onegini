// Main gradle build configuration used to generate cordova plugin dependencies and plugin.xml configuration.
apply from: 'dependencies.gradle'
apply plugin: 'java'

def workDirectory = "build/jarjar/"
def pluginAndroidDir = 'src/android'
def applicationSrcDir = 'src/android'
def applicationResDir = 'res'

buildscript {
  repositories {
    mavenLocal()
    mavenCentral()
    jcenter()
  }
  dependencies {
    classpath 'com.android.tools.build:gradle:2.1.2'
  }
}

allprojects {
  sourceCompatibility = 1.6
  targetCompatibility = 1.6
  repositories {
    mavenLocal()
    mavenCentral()
    jcenter()

    def androidHome = System.getenv("ANDROID_HOME")
    maven { url "$androidHome/extras/android/m2repository/" }
    maven { url "$androidHome/extras/google/m2repository/" }

    maven {
      url "https://repo.onegini.com/artifactory/public"
      credentials {
        if (project.hasProperty('artifactory_user') && project.hasProperty('artifactory_password')) {
          username artifactory_user
          password artifactory_password
        }
      }
    }
  }
}

dependencies {
  compile DEPENDENCIES
}

task workDirecotryExists {
  if (!file(workDirectory).exists()) {
    file(workDirectory).mkdirs();
  }
}

task clearOldLibs(type: Delete, dependsOn: workDirecotryExists) {
  delete fileTree(dir: workDirectory, exclude: ['.gitignore', 'jarjar*'])
}

task downloadLibs(type: Copy, dependsOn: clearOldLibs) {
  into(workDirectory)
  from(configurations.compile)
  exclude('jarjar*')
}

task downloadAndPrepareLibs(type: Copy, dependsOn: downloadLibs) {
  def aarLibrary
  def name
  configurations.compile.each {
    if (it.name.endsWith(".aar")) {
      aarLibrary = it.absoluteFile;
      name = it.name
    }
  }
  from zipTree(aarLibrary)
  println(workDirectory)
  into workDirectory
  include "classes.jar"
  include "libs/*.jar"
  rename { filename ->
    filename.replace('classes', name)
  }

}

task prepareLibrares(dependsOn: 'downloadAndPrepareLibs') {
  doLast {
    project.ant {
      taskdef name: "jarjar", classname: "com.tonicsystems.jarjar.JarJarTask", classpath: "lib/jarjar-1.4.jar"
      jarjar(jarfile: 'lib/plugin-dependencies.jar') {
        configurations.compile.each {
          if (it.name.endsWith("jar")) {
            zipfileset(src: "build/jarjar/" + it.name)
          } else {
            zipfileset(src: "build/jarjar/" + it.name + ".jar")
          }
        }

        FileTree additionalLibs = fileTree(dir: workDirectory + '/libs')
        additionalLibs.include '*.jar'
        additionalLibs.each {
          File file -> zipfileset(src: workDirectory + '/libs/' + file.name)
        }
      }
    }
    file(workDirectory).deleteDir();
    println "<source-file src=\"$pluginAndroidDir/lib/plugin-dependencies.jar\" target-dir=\"libs/\" />"
  }
}

task javaAsPluginNodes {
  doLast {
    def javaFiles = fileTree(dir: applicationSrcDir, include: "**/*.java")
    javaFiles.visit {
      if (it.name.endsWith(".java")) {
        def targetDir = it.relativePath.toString().replace(it.name, "");
        println "<source-file src=\"$pluginAndroidDir/$applicationSrcDir/$it.relativePath\" target-dir=\"src/$targetDir\" />"
      }
    }
  }
}

task resAsPluginNodes {
  doLast {
    def resFiles = fileTree(dir: applicationResDir, include: "**/*")
    resFiles.visit {
      if (!it.isDirectory()) {
        println "<resource-file src=\"$pluginAndroidDir/$applicationResDir/$it.relativePath\" target=\"res/$it.relativePath\" />"
      }
    }
  }
}

task preparePlugin(dependsOn: [javaAsPluginNodes, prepareLibrares, resAsPluginNodes]) {
  doLast {
    println "Plugin generated"
  }
}
